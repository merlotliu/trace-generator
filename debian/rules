#!/usr/bin/make -f

# 启用详细输出
export DH_VERBOSE=1
# 禁用测试，加快构建
export DEB_BUILD_OPTIONS=nocheck

%:
	dh $@ --with python3 --buildsystem=pybuild

override_dh_auto_configure:
	# 配置阶段，检查依赖
	@echo "=== 配置构建环境 ==="
	@python3 --version
	@if [ -d "rust-components" ]; then rustc --version; fi
	@if [ -d "cpp-components" ]; then cmake --version; fi

override_dh_auto_build:
	@echo "=== 开始构建多语言组件 ==="
	
	# 构建 Rust 组件（如果存在）
	if [ -d "rust-components" ]; then \
		echo "构建 Rust 组件..."; \
		cd rust-components && \
		cargo build --release; \
	fi
	
	# 构建 C++ 组件（如果存在）
	if [ -d "cpp-components" ]; then \
		echo "构建 C++ 组件..."; \
		cd cpp-components && \
		cmake . -DCMAKE_BUILD_TYPE=Release && \
		make -j$$(nproc); \
	fi
	
	# 构建 Python 组件
	@echo "构建 Python 组件..."
	python3 setup.py build

override_dh_auto_install:
	@echo "=== 安装组件 ==="
	
	# 安装 Python 组件
	python3 setup.py install --root=debian/tracegen --prefix=/usr
	
	# 安装 Rust 编译的二进制文件
	if [ -d "rust-components/target/release" ]; then \
		find rust-components/target/release -type f -executable -not -name "*.so*" | while read file; do \
			install -D "$$file" "debian/tracegen/usr/bin/$$(basename $$file)"; \
		done; \
	fi
	
	# 安装 C++ 编译的文件
	if [ -d "cpp-components" ]; then \
		make -C cpp-components install DESTDIR=$$(pwd)/debian/tracegen; \
	fi
	
	# 安装配置文件
	if [ -d "configs" ]; then \
		install -d debian/tracegen/usr/share/tracegen; \
		install -m 644 configs/* debian/tracegen/usr/share/tracegen/; \
	fi

override_dh_auto_test:
	@echo "=== 运行测试 ==="
	# 基本功能测试
	PYTHONPATH=. python3 -c "import tracegen; print('Python 模块导入成功')"
	# CLI 测试
	python3 -m tracegen.cli --help > /dev/null && echo "CLI 帮助测试通过"

override_dh_auto_clean:
	@echo "=== 清理构建文件 ==="
	# 清理 Python 构建文件
	rm -rf build/ tracegen.egg-info/
	# 清理 Rust 构建文件
	if [ -d "rust-components" ]; then cd rust-components && cargo clean; fi
	# 清理 C++ 构建文件
	if [ -d "cpp-components" ]; then cd cpp-components && make clean 2>/dev/null || true; fi 